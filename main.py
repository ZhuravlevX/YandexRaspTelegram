import asyncio
import locale
import logging
import os
import random
from datetime import datetime

from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto, Message
from dotenv import load_dotenv

from src.get_train_info import get_train_info
from src.utils.load_config import load_config
from src.route_select.route_selector import route_selector

load_dotenv()
locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')

token_yandex = os.getenv('TOKEN_YANDEX')
token_bot = os.getenv('TOKEN_BOT')

config = load_config()
image_urls = config.image_urls
dp = Dispatcher()
dp.include_router(route_selector)

logging.basicConfig(level=logging.INFO)


async def update_trains(message: Message, state: FSMContext):
    remaining_time = 60
    data = await state.get_data()
    from_station = data.get('from_station')
    to_station = data.get('to_station')
    await state.update_data(autoupdate=True)

    for i in range(60):
        current_time = datetime.now().strftime('%H:%M')
        train_info = get_train_info(from_station, to_station)
        random_image = random.choice(image_urls)
        data = await state.get_data()

        if not data.get("autoupdate"):
            train_info += f"\nüöÜüö´<b> –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ {current_time}.</b>"
            media = InputMediaPhoto(media=random_image, caption=train_info, parse_mode='HTML')
            await message.edit_media(media)
            await state.update_data(autoupdate=False)
            return

        if train_info:
            if i < 59:
                remaining_time -= 1
                additional_text = f"\n<b>üöÜ‚åõ –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É. –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {remaining_time} –º–∏–Ω—É—Ç.</b>"
                keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(
                    text="üö´ | –û—Ç–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", callback_data=f"cancel_update")]])

            else:
                additional_text = f"\n<b>üöÜ‚åõ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –≤ {current_time}, —É—á—Ç–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è!</b>"
                await state.update_data(autoupdate=False)
                keyboard = None

            train_info += additional_text
            media = InputMediaPhoto(media=random_image, caption=train_info, parse_mode='HTML')
            await message.edit_media(media, reply_markup=keyboard)
        else:
            await message.edit_text(
                "üöÜüö´ <b>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –º–∞—Ä—à—Ä—É—Ç—É —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –º—ã –Ω–µ –Ω–∞—à–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–∏—á–∫–∏.</b>",
                parse_mode='HTML')
            await state.update_data(autoupdate=False)
            return
        await asyncio.sleep(60)


@dp.message(CommandStart())
async def send_welcome(message: Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚¨Ö | –£–∫–∞–∑–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç", callback_data="find_route")],
                         [InlineKeyboardButton(text="üöÜ | –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–∏—á–µ–∫", callback_data="send_suburban")]])

    random_image = random.choice(image_urls)
    await message.answer_photo(photo=random_image,
                               caption="üìã <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–≥–æ—Ä–æ–¥–Ω—ã—Ö —ç–ª–µ–∫—Ç—Ä–∏—á–µ–∫ –∏ —ç–∫—Å–ø—Ä–µ—Å—Å–æ–≤</b>\n\n"
                                       "–î–∞–Ω–Ω—ã–π –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º –±—ã—Å—Ç—Ä–æ —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–± –≤–∞—à–µ–º –ø–æ–µ–∑–¥–µ. –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –ª–∏—à—å —É–∫–∞–∑–∞—Ç—å –æ—Ç–∫—É–¥–∞ –∏ –∫—É–¥–∞ –≤–∞–º –Ω–∞–¥–æ –ø—Ä–∏–µ—Ö–∞—Ç—å –∏ –ø–æ—è–≤–∏—Ç—å—Å—è –ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –±–ª–∏–∂–∞–π—à–∏—Ö –ø—Ä–∏–≥–æ—Ä–æ–¥–Ω—ã—Ö —ç–ª–µ–∫—Ç—Ä–∏—á–µ–∫ –∏ –ø–æ–µ–∑–¥–∞—Ö.\n\n"
                                       "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ —Ç–µ–∫—É—â–∏–º —É–∫–∞–∑–∞–Ω–∏—è–º –º–∞—Ä—à—Ä—É—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.",
                               parse_mode='HTML', reply_markup=keyboard)

@dp.message(Command('suburban'))
async def send_trains(message: Message, state: FSMContext):
    data = await state.get_data()
    from_station = data.get('from_station')
    to_station = data.get('to_station')

    if (await state.get_data()).get("autoupdate"):
        await message.reply("üöÜüìã <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ. "
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫–ª—é—á–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –Ω–æ–≤–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.</b>",
                            parse_mode='HTML')
        return

    if not from_station or not to_station:
        await message.reply("üöÜüõÉ <b>–ú–∞—Ä—à—Ä—É—Ç —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. "
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–∏—Å–∫–æ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–∏—á–µ–∫.</b>",
                            parse_mode='HTML')
        return
    else:
        initial_message = await message.reply("üöÜüìã <b>–ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–µ–∑–¥–æ–≤...</b>", parse_mode='HTML')
        await update_trains(initial_message, state)


@dp.callback_query(lambda c: c.data == 'cancel_update')
async def cancel_update(callback_query: types.CallbackQuery, state: FSMContext):
    await state.update_data(autoupdate=False)
    await bot.answer_callback_query(callback_query.id,
                                    text="üö´‚åõ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ, —É—á—Ç–∏—Ç–µ —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏. –û—Ç–º–µ–Ω–∞ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ –º–∏–Ω—É—Ç—ã.")
    await bot.edit_message_reply_markup(callback_query.message.business_connection_id, callback_query.message.chat.id,
                                        callback_query.message.message_id,
                                        reply_markup=None)


@dp.callback_query(lambda c: c.data == "send_suburban")
async def handle_send_suburban(callback_query: types.CallbackQuery, state: FSMContext):
    await send_trains(callback_query.message, state)


if __name__ == '__main__':
    bot = Bot(token=token_bot)
    asyncio.run(dp.start_polling(bot))
