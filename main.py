import asyncio
import locale
import logging
import os
import random
from datetime import datetime

from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.mongo import MongoStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto, Message
from dotenv import load_dotenv
from motor.motor_asyncio import AsyncIOMotorClient
from aiogram.types.input_file import FSInputFile

from src.get_suburban_info import get_suburban_info
from src.get_train_info import get_train_info
from src.utils.load_config import load_config
from src.route_select.route_selector import route_selector

load_dotenv()
locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')

token_yandex = os.getenv('TOKEN_YANDEX')
token_bot = os.getenv('TOKEN_BOT')
admin_id = int(os.getenv('ADMIN_ID'))

config = load_config()
image_urls = config.image_urls
dp = Dispatcher(storage=MongoStorage(client=AsyncIOMotorClient()).from_url(
    os.getenv("MONGO_URL")))
dp.include_router(route_selector)

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    datefmt='%d-%m-%y %H:%M:%S')
auto_update_users = {}

async def update_suburbans(message: Message, user_id: int, state: FSMContext):
    remaining_time = 60
    data = await state.get_data()
    from_station = data.get('from_station')
    to_station = data.get('to_station')
    auto_update_users[user_id] = True

    for i in range(60):
        current_time = datetime.now().strftime('%H:%M')
        train_info = get_suburban_info(from_station, to_station)
        random_image = random.choice(image_urls)

        if not auto_update_users[user_id]:
            train_info += f"\nüöÜüö´<b> –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ {current_time}.</b>"
            media = InputMediaPhoto(media=random_image, caption=train_info, parse_mode='HTML')
            await message.edit_media(media)
            auto_update_users[user_id] = False
            return

        if train_info:
            if data.get('enable_auto_update'):
                if i < 59:
                    remaining_time -= 1
                    additional_text = f"\n<b>üöÜ‚åõ –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É. –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {remaining_time} –º–∏–Ω—É—Ç.</b>"
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(
                        text="üö´ | –û—Ç–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", callback_data="cancel_update")]])
                else:
                    additional_text = f"\n<b>üöÜ‚åõ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –≤ {current_time}, —É—á—Ç–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è!</b>"
                    auto_update_users[user_id] = False
                    keyboard = None

                train_info += additional_text
                media = InputMediaPhoto(media=random_image, caption=train_info, parse_mode='HTML')
                await message.edit_media(media, reply_markup=keyboard)
            else:
                additional_text = f"\n<b>üöâ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±—ã–ª–æ –≤—ã–∑–≤–∞–Ω–æ –≤ {current_time} –±–µ–∑ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, —É—á—Ç–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è!</b>"

                train_info += additional_text
                media = InputMediaPhoto(media=random_image, caption=train_info, parse_mode='HTML')
                await message.edit_media(media)
                auto_update_users[user_id] = False
                return
            await asyncio.sleep(60)
        else:
            await message.edit_text(
                "üöÜüö´ <b>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –º–∞—Ä—à—Ä—É—Ç—É —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –º—ã –Ω–µ –Ω–∞—à–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–∏—á–∫–∏.</b>",
                parse_mode='HTML')
            auto_update_users[user_id] = False
            return

async def update_trains(message: Message, user_id: int, state: FSMContext):
    remaining_time = 60
    data = await state.get_data()
    from_city = data.get('from_city')
    to_city = data.get('to_city')
    auto_update_users[user_id] = True

    for i in range(60):
        current_time = datetime.now().strftime('%H:%M')
        train_info = get_train_info(from_city, to_city)
        random_image = random.choice(image_urls)

        if not auto_update_users[user_id]:
            train_info += f"\nüöÜüö´<b> –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ {current_time}.</b>"
            media = InputMediaPhoto(media=random_image, caption=train_info, parse_mode='HTML')
            await message.edit_media(media)
            auto_update_users[user_id] = False
            return

        if train_info:
            if data.get('enable_auto_update'):
                if i < 59:
                    remaining_time -= 1
                    additional_text = f"\n<b>üöÜ‚åõ –°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É. –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {remaining_time} –º–∏–Ω—É—Ç.</b>"
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(
                        text="üö´ | –û—Ç–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", callback_data="cancel_update")]])
                else:
                    additional_text = f"\n<b>üöÜ‚åõ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –≤ {current_time}, —É—á—Ç–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è!</b>"
                    auto_update_users[user_id] = False
                    keyboard = None

                train_info += additional_text
                media = InputMediaPhoto(media=random_image, caption=train_info, parse_mode='HTML')
                await message.edit_media(media, reply_markup=keyboard)
            else:
                additional_text = f"\n<b>üöÇ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±—ã–ª–æ –≤—ã–∑–≤–∞–Ω–æ –≤ {current_time} –±–µ–∑ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, —É—á—Ç–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è!</b>"

                train_info += additional_text
                media = InputMediaPhoto(media=random_image, caption=train_info, parse_mode='HTML')
                await message.edit_media(media)
                auto_update_users[user_id] = False
                return
            await asyncio.sleep(60)
        else:
            await message.edit_text(
                "üöÜüö´ <b>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –º–∞—Ä—à—Ä—É—Ç—É —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –º—ã –Ω–µ –Ω–∞—à–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–∏—á–∫–∏.</b>",
                parse_mode='HTML')
            auto_update_users[user_id] = False
            return

@dp.message(CommandStart())
async def send_welcome(message: Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚¨Ö | –£–∫–∞–∑–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç", callback_data="find_route"), InlineKeyboardButton(text="‚öô | –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
                         [InlineKeyboardButton(text="üìã | –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ ", callback_data="schedule")]])

    random_image = random.choice(image_urls)
    await message.answer_photo(photo=random_image,
                               caption="üìã <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–≥–æ—Ä–æ–¥–Ω—ã—Ö —ç–ª–µ–∫—Ç—Ä–∏—á–µ–∫ –∏ —ç–∫—Å–ø—Ä–µ—Å—Å–æ–≤</b>\n\n"
                                       "–î–∞–Ω–Ω—ã–π –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–∞–º –±—ã—Å—Ç—Ä–æ —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–± –≤–∞—à–µ–π —ç–ª–µ–∫—Ç—Ä–∏—á–∫–µ –∏–ª–∏ –ø–æ–µ–∑–¥–∞—Ö. –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –ª–∏—à—å —É–∫–∞–∑–∞—Ç—å –û–¢–ö–£–î–ê –∏ –ö–£–î–ê –≤–∞–º –Ω–∞–¥–æ –ø–æ–µ—Ö–∞—Ç—å –∏ –ø–æ—è–≤–∏—Ç—å—Å—è –ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –±–ª–∏–∂–∞–π—à–∏—Ö –ø—Ä–∏–≥–æ—Ä–æ–¥–Ω—ã—Ö —ç–ª–µ–∫—Ç—Ä–∏—á–µ–∫ –∏ –ø–æ–µ–∑–¥–∞—Ö.\n\n"
                                       "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏–ª–∏ —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ —Ç–µ–∫—É—â–µ–º—É –º–∞—Ä—à—Ä—É—Ç—É, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, –ª–∏–±–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–∞–º–∏ /suburban –∏ /route.",
                               parse_mode='HTML', reply_markup=keyboard)

@dp.message(Command('suburban'))
async def send_suburbans(message: Message, state: FSMContext):
    data = await state.get_data()
    from_station = data.get('from_station')
    to_station = data.get('to_station')
    user_id = message.chat.id

    if auto_update_users.get(user_id, False):
        await message.reply("üöÜüìã <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ. "
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫–ª—é—á–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –Ω–æ–≤–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.</b>",
                            parse_mode='HTML')
        return

    if not from_station or not to_station:
        await message.reply("üöÜüõÉ <b>–ú–∞—Ä—à—Ä—É—Ç —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. "
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–∏—Å–∫–æ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–∏—á–µ–∫.</b>",
                            parse_mode='HTML')
        return
    else:
        initial_message = await message.reply("üöÜüìã <b>–ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–∏—á–µ–∫...</b>", parse_mode='HTML')
        await update_suburbans(initial_message, user_id, state)

@dp.message(Command('train'))
async def send_trains(message: Message, state: FSMContext):
    data = await state.get_data()
    from_city = data.get('from_city')
    to_city = data.get('to_city')
    user_id = message.chat.id

    if auto_update_users.get(user_id, False):
        await message.reply("üöÇüìã <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ. "
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫–ª—é—á–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –Ω–æ–≤–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.</b>",
                            parse_mode='HTML')
        return

    if not from_city or not to_city:
        await message.reply("üöÇüõÉ <b>–ú–∞—Ä—à—Ä—É—Ç —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. "
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–∏—Å–∫–æ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–∏—á–µ–∫.</b>",
                            parse_mode='HTML')
        return
    else:
        initial_message = await message.reply("üöÇüìã <b>–ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–µ–∑–¥–æ–≤...</b>", parse_mode='HTML')
        await update_trains(initial_message, user_id, state)

@dp.callback_query(lambda c: c.data == 'cancel_update')
async def cancel_update(callback_query: types.CallbackQuery):
    user_id = callback_query.message.chat.id
    auto_update_users[user_id] = False
    await bot.answer_callback_query(callback_query.id,
                                    text="üö´‚åõ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ, —É—á—Ç–∏—Ç–µ —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏. –û—Ç–º–µ–Ω–∞ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ –º–∏–Ω—É—Ç—ã.")
    await bot.edit_message_reply_markup(callback_query.message.business_connection_id, callback_query.message.chat.id,
                                        callback_query.message.message_id,
                                        reply_markup=None)

@dp.callback_query(lambda c: c.data == "send_suburban")
async def handle_send_suburban(callback_query: types.CallbackQuery, state: FSMContext):
    await send_suburbans(callback_query.message, state)

@dp.callback_query(lambda c: c.data == "send_train")
async def handle_send_suburban(callback_query: types.CallbackQuery, state: FSMContext):
    await send_trains(callback_query.message, state)

@dp.callback_query(lambda c: c.data == "schedule")
async def handle_schedule(callback_query: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üöâ | –≠–ª–µ–∫—Ç—Ä–∏—á–∫–∏", callback_data="send_suburban"), InlineKeyboardButton(text="üöÇ | –ü–æ–µ–∑–¥–∞", callback_data="send_train")]])
    await callback_query.message.reply("üìãüîç <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞, –∫–æ—Ç–æ—Ä–æ–µ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∑–Ω–∞—Ç—å.</b>", parse_mode='HTML', reply_markup=keyboard)

@dp.callback_query(lambda c: c.data == "enable_auto_update")
async def handle_enable_auto_update(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    enable_auto_update = data.get('enable_auto_update', False)
    new_status = not enable_auto_update
    await state.update_data(enable_auto_update=new_status)

    emoji = "‚úÖ" if new_status else "‚ùå"
    settings_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=f"{emoji} | –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", callback_data="enable_auto_update"),
                         InlineKeyboardButton(text="üöÆ | –û—á–∏—Å—Ç–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞", callback_data="clear_route")],
                         [InlineKeyboardButton(text="‚¨Ö | –ù–∞–∑–∞–¥", callback_data="back")]])
    await bot.edit_message_reply_markup(chat_id=callback_query.message.chat.id,
                                        message_id=callback_query.message.message_id,
                                        reply_markup=settings_keyboard)

@dp.callback_query(lambda c: c.data == "settings")
async def handle_settings(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    enable_auto_update = data.get('enable_auto_update', False)
    emoji = "‚úÖ" if enable_auto_update else "‚ùå"
    settings_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=f"{emoji} | –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", callback_data="enable_auto_update"),
                         InlineKeyboardButton(text="üöÆ | –û—á–∏—Å—Ç–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞", callback_data="clear_route")],
                         [InlineKeyboardButton(text="‚¨Ö | –ù–∞–∑–∞–¥", callback_data="back")]])
    await bot.edit_message_reply_markup(chat_id=callback_query.message.chat.id,
                                        message_id=callback_query.message.message_id,
                                        reply_markup=settings_keyboard)

@dp.callback_query(lambda c: c.data == "clear_route")
async def clear_route(callback_query: types.CallbackQuery, state: FSMContext):
    await state.update_data(from_station=None, to_station=None)
    await bot.send_message(callback_query.message.chat.id, "üöÜüöÆ <b>–ú–∞—Ä—à—Ä—É—Ç —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω. –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /route.</b>", parse_mode='HTML')

@dp.callback_query(lambda c: c.data == "back")
async def handle_back(callback_query: types.CallbackQuery):
    main_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚¨Ö | –£–∫–∞–∑–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç", callback_data="find_route_city"), InlineKeyboardButton(text="‚öô | –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")],
                         [InlineKeyboardButton(text="üìã | –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="schedule")]])
    await bot.edit_message_reply_markup(chat_id=callback_query.message.chat.id,
                                        message_id=callback_query.message.message_id,
                                        reply_markup=main_keyboard)

@dp.message(Command('log'))
async def send_log_file(message: Message):
    if message.from_user.id == admin_id:
        log_file_path = 'YandexRaspBot-error.log'
        if os.path.exists(log_file_path):
            await message.answer_document(FSInputFile(log_file_path), caption="‚úÖ‚öô <b>–§–∞–π–ª –ª–æ–≥–æ–≤ –±—ã–ª –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è—é –µ–≥–æ –≤–∞–º!</b>", parse_mode='HTML')
        else:
            await message.answer("‚ùå‚öô <b>–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>", parse_mode='HTML')

if __name__ == '__main__':
    bot = Bot(token=token_bot)
    asyncio.run(dp.start_polling(bot))