from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, Message

from src.models.stations import Station
from src.search.find_station import find_station

route_selector = Router()


class RouteSelectState(StatesGroup):
    from_station_search = State()
    from_station_second_search = State()
    to_station_search = State()
    to_station_second_search = State()


def select_stations_list(stations: list[Station]) -> str:
    resp = []
    for index, station in enumerate(stations[:10]):
        resp.append(f'{index + 1}. {station.title} ({station.region})')
    return '\n'.join(resp)


@route_selector.callback_query(lambda c: c.data == 'find_route')
async def find_route(c: CallbackQuery, state: FSMContext):
    await state.set_state(RouteSelectState.from_station_search)
    await c.message.reply('üöÜüõÉ <b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏ –∏–ª–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –û–¢–ö–£–î–ê –≤—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å</b>', parse_mode='HTML')


@route_selector.message(RouteSelectState.from_station_search)
async def from_station_handler(message: Message, state: FSMContext):
    stations = find_station(message.text.casefold())
    if len(stations) == 0:
        await message.reply(f"‚ùåüõÉ <b>–°—Ç–∞–Ω—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏.</b>", parse_mode='HTML')
    elif len(stations) == 1:
        await message.reply(
            f'üöÜüõÉ <b>–ù–∞–π–¥–µ–Ω–∞ —Å—Ç–∞–Ω—Ü–∏—è "{stations[0].title}" –≤ {stations[0].region}. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏ –∏–ª–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –ö–£–î–ê –≤—ã –µ–¥–µ—Ç–µ.</b>', parse_mode='HTML')
        await state.update_data(from_station=stations[0].code)
        await state.set_state(RouteSelectState.to_station_search)
    else:
        await message.reply(f'üöÜüõÉ <b>–ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏ —Å –ø–æ—Ö–æ–∂–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º:\n{select_stations_list(stations)}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω—É–∂–Ω–æ–π –≤–∞–º —Å—Ç–∞–Ω—Ü–∏–∏.</b>', parse_mode='HTML')
        await state.set_state(RouteSelectState.from_station_second_search)
        await state.update_data(stations_list=stations)


@route_selector.message(RouteSelectState.from_station_second_search)
async def from_station_second_search_handler(message: Message, state: FSMContext):
    index = 1
    try:
        index = int(message.text.casefold())
        if index > 10 or index < 1:
            raise Exception
    except:
        return await message.reply('f‚ùåüõÉ <b>–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç–∞–Ω—Ü–∏–∏</b>', parse_mode='HTML')
    data = await state.get_data()
    station: Station = data['stations_list'][index - 1]
    await message.reply(
        f'üöÜüõÉ <b>–í—ã–±—Ä–∞–Ω–∞ —Å—Ç–∞–Ω—Ü–∏—è "{station.title}" ({station.region}). –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏ –∏–ª–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –ö–£–î–ê –≤—ã –µ–¥–µ—Ç–µ.</b>', parse_mode='HTML')
    await state.update_data(from_station=station.code)
    await state.set_state(RouteSelectState.to_station_search)


@route_selector.message(RouteSelectState.to_station_search)
async def to_station_handler(message: Message, state: FSMContext):
    stations = find_station(message.text.casefold())
    if len(stations) == 0:
        await message.reply(f'‚ùåüõÉ <b>–°—Ç–∞–Ω—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏.</b>', parse_mode='HTML')
    elif len(stations) == 1:
        await message.reply(
            f'üöÜüõÉ <b>–ù–∞–π–¥–µ–Ω–∞ —Å—Ç–∞–Ω—Ü–∏—è "{stations[0].title}" ({stations[0].region}). –ú–∞—Ä—à—Ä—É—Ç –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.</b>', parse_mode='HTML')
        await state.update_data(to_station=stations[0].code)
        await state.set_state()

    else:
        await message.reply(f'üöÜüõÉ <b>–ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç–∞–Ω—Ü–∏–∏ —Å –ø–æ—Ö–æ–∂–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º:\n{select_stations_list(stations)}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω—É–∂–Ω–æ–π –≤–∞–º —Å—Ç–∞–Ω—Ü–∏–∏.</b>', parse_mode='HTML')
        await state.set_state(RouteSelectState.to_station_second_search)
        await state.update_data(stations_list=stations)


@route_selector.message(RouteSelectState.to_station_second_search)
async def to_station_second_search_handler(message: Message, state: FSMContext):
    index = 1
    try:
        index = int(message.text.casefold())
        if index > 10 or index < 1:
            raise Exception
    except:
        return await message.reply(f'‚ùåüõÉ <b>–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç–∞–Ω—Ü–∏–∏</b>', parse_mode='HTML')
    data = await state.get_data()
    station: Station = data['stations_list'][index - 1]
    await message.reply(f'üöÜüõÉ <b>–ù–∞–π–¥–µ–Ω–∞ —Å—Ç–∞–Ω—Ü–∏—è "{station.title}" ({station.region}). –ú–∞—Ä—à—Ä—É—Ç –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.</b>', parse_mode='HTML')
    await state.update_data(to_station=station.code)
    await state.set_state()
